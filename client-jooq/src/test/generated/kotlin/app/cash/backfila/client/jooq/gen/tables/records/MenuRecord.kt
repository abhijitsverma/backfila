/*
 * This file is generated by jOOQ.
 */
package app.cash.backfila.client.jooq.gen.tables.records

import app.cash.backfila.client.jooq.gen.tables.Menu

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl

/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class MenuRecord() : UpdatableRecordImpl<MenuRecord>(Menu.MENU), Record2<Long?, String?> {

  var id: Long?
    set(value) = set(0, value)
    get() = get(0) as Long?

  var name: String?
    set(value) = set(1, value)
    get() = get(1) as String?

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override fun key(): Record1<Long?> = super.key() as Record1<Long?>

  // -------------------------------------------------------------------------
  // Record2 type implementation
  // -------------------------------------------------------------------------

  override fun fieldsRow(): Row2<Long?, String?> = super.fieldsRow() as Row2<Long?, String?>
  override fun valuesRow(): Row2<Long?, String?> = super.valuesRow() as Row2<Long?, String?>
  override fun field1(): Field<Long?> = Menu.MENU.ID
  override fun field2(): Field<String?> = Menu.MENU.NAME
  override fun component1(): Long? = id
  override fun component2(): String? = name
  override fun value1(): Long? = id
  override fun value2(): String? = name

  override fun value1(value: Long?): MenuRecord {
    this.id = value
    return this
  }

  override fun value2(value: String?): MenuRecord {
    this.name = value
    return this
  }

  override fun values(value1: Long?, value2: String?): MenuRecord {
    this.value1(value1)
    this.value2(value2)
    return this
  }

  /**
   * Create a detached, initialised MenuRecord
   */
  constructor(id: Long? = null, name: String? = null) : this() {
    this.id = id
    this.name = name
  }
}
